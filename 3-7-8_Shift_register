module top_module (
    input wire [3:0] SW,//R input
    input wire [3:0] KEY,//key0-clk, key1-e, key2-L, key3-w
    output reg [3:0] LEDR
); //

    
    MUXDFF u0 (.clk(KEY[0]), .w(LEDR[1]), .R(SW[0]), .E(KEY[1]), .L(KEY[2]), .Q(LEDR[0]));
    MUXDFF u1 (.clk(KEY[0]), .w(LEDR[2]), .R(SW[1]), .E(KEY[1]), .L(KEY[2]), .Q(LEDR[1]));
    MUXDFF u2 (.clk(KEY[0]), .w(LEDR[3]), .R(SW[2]), .E(KEY[1]), .L(KEY[2]), .Q(LEDR[2]));
    MUXDFF u3 (.clk(KEY[0]), .w(KEY[3]), .R(SW[3]), .E(KEY[1]), .L(KEY[2]), .Q(LEDR[3]));
    
endmodule

module MUXDFF (
    input wire clk,
    input wire w, 
    input wire R,
    input wire E,
    input wire L,
    output reg Q
);
    wire n;
    wire d;
    
    assign n = E? w: Q;
    assign d = L? R: n;
    
    always @ (posedge clk) begin
        Q = d;
    end
    
endmodule
